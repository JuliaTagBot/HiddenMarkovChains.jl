"Random simplex of `n` elements, generated by normalizing draws from
`distribution`."
rand_simplex(n, distribution) = normalize(abs(rand(distribution, n)), 1)

"Random sparse stochastic matrix with size (nrow,ncol).

Matrix has `m` nonzerelements in each row, which are generated by
normalizing the absolute value of draws from `distribution`."
function random_sparse_stochastic_matrix(nrow::Int, m::Int;
                                         distribution = Normal(),
                                         ncol = nrow)
    I = repeat(1:nrow, inner=m)
    J = vcat([sample(1:ncol, m, replace=false) for i in 1:nrow]...)
    V = vcat([rand_simplex(m, distribution) for i in 1:nrow]...)
    sparse(I, J, V, nrow, ncol)
end

function random_stochastic_matrix(nrow; distribution = Normal(), ncol = nrow)
    P = Array(Float64, nrow, ncol)
    for i in 1:nrow
        P[i, :] = rand_simplex(ncol, distribution)
    end
    P
end

"Random HMC for testing. Ï€ is steady state."
function random_HMC(N_states, N_observations, T)
    HiddenMarkovChain(random_stochastic_matrix(N_states),
                      random_stochastic_matrix(N_states; ncol=N_observations),
                      T)
end

"""
Average and largest absolute difference in probabilities. Iterates
over paths in `pp`.
"""
function path_probabilities_difference(pp, pp_sim)
    sumdiff = 0.0
    maxdiff = 0.0
    for (path, prob) in pp
        diff = abs(pp_sim[path] - prob)
        sumdiff += diff
        maxdiff = max(maxdiff, diff)
    end
    (sumdiff/length(pp), maxdiff)
end

"""
Paths in simulation which are not covered by exact calculations. A
nonempty set may indicate a problem.
"""
uncovered_paths(pp, pp_sim) = setdiff(keys(pp_sim), keys(pp))
